-------------------------

evo_Config

-------------------------

The main setup datatype for configuring the behaviour of the evolutionary algorithm.
It is an opaque pointer to prevent unnecessary exposure of implementation details.

-----------------------------
evo_Config* evo_Config_New();
-----------------------------

Makes a new configuration instance, for use by various setup calls.

-----------------------------
void evo_Config_Free(evo_Config* config);
-----------------------------

Frees the memory associated with the configuration object.



-------------------------

evo_Config Required Setup

-------------------------

All setup functions must be called before an evo_Config_Execute call.
Configurations must not be reused.

-------------------------------------------------------------------------
void evo_Config_SetThreadCount(evo_Config* config, evo_uint threadCount);
-------------------------------------------------------------------------

Makes known how many threads the genetic algorithm trials should run across.
Must be non-zero.

---------------------------------------------------------------------------------
void evo_Config_SetTrialsPerThread(evo_Config* config, evo_uint trialsPerThread);
---------------------------------------------------------------------------------

Makes known how many trials of the evolutionary algorithm should run on each of the threads.
Must be non-zero.

-----------------------------------------------------------------------------
void evo_Config_SetMaxIterations(evo_Config* config, evo_uint maxIterations);
-----------------------------------------------------------------------------

States the maximum number of iterations that a run of the genetic algorithm should perform,
before recording the event as a failure. Must be non-zero.

-------------------------------------------------------------------------------
void evo_Config_SetPopulationSize(evo_Config* config, evo_uint populationSize);
-------------------------------------------------------------------------------

Decides the number of population members for each run of the genetic algorithm.
Each thread allocates their own population data based on this value.

-------------------------------------------------------------------------------------------------------------
void evo_Config_SetPopulationInitializer(evo_Config config, evo_PopulationInitializer populationInitializer);
-------------------------------------------------------------------------------------------------------------

Sets the population initializer, which has the following signature:

    typedef evo_bool (*evo_PopulationInitializer)(evo_Context* context, evo_uint populationSize);
    
This callback is invoked every trial.

Sets up every gene in the population.

The function is expected to setup the context's initial genes.
If the context's genes array is NULL, then this means a fresh allocation is needed.
Otherwise, the genes array should be re-randomized/reallocated.

This initializer can also allocate a userdata type for use with the selection operator.
If it does though, the population finalizer should be tasked with freeing it.

If the initialization succeeds, this function should return true.
Otherwise, return false to indicate there was a failure (allocation, or whatever).

------------------------------------------------------------------------------------------------------
void evo_Config_SetPopulationFinalizer(evo_Config config, evo_PopulationFinlizer populationFinalizer);
------------------------------------------------------------------------------------------------------

Sets the population finalizer, which has the following signature:

    typedef void (*evo_PopulationFinalizer)(evo_Context* context, evo_uint populationSize);
    
This callback is invoked when a thread has finished all of its trials.

This function is expected to free the memory associated with every gene in the context.

--------------------------------------------------------------------------------------------
void evo_Config_SetFitnessOperator(evo_Config* config, evo_FitnessOperator fitnessOperator);
--------------------------------------------------------------------------------------------

Sets the fitness operator, which has the following signature:
    
    typedef double (*evo_FitnessOperator)(evo_Context* context, void* gene);

Takes a gene, and returns a numeric value, assessing how good thaat particular gene is.

--------------------------------------------------------------------------------------------
void evo_Config_SetSelectionOperator(evo_Config* config, evo_SelectionOperator selectionOperator);
--------------------------------------------------------------------------------------------

Sets the selection operator, which has the following signature:
    
    typedef void (*evo_SelectionOperator)(evo_Context* context, evo_uint populationSize);
        
Tasked with deciding which genes should breed, and which genes should be replaced.

It should use evo_Context_AddBreedEvent to construct the list
used by crossover and mutation.

--------------------------------------------------------------------------------------------------
void evo_Config_SetCrossoverOperator(evo_Config* config, evo_CrossoverOperator crossoverOperator);
--------------------------------------------------------------------------------------------------

Sets the crossover operator, which has the following signature:
    
    typedef void (*evo_CrossoverOperator)(evo_Context* context,
        void* parentA, void* parentB, void* childA, void* childB);
        
Takes 2 parents (genes chosen to breed), and 2 children (genes chosen to be replaced).
The crossover operator should perform some kind of copy or combination of the parent genes,
and overwrite the contents of the children.

--------------------------------------------------------------------------------------------------
void evo_Config_SetMutationOperator(evo_Config* config, evo_MutationOperator mutationOperator);
--------------------------------------------------------------------------------------------------

Sets the mutation operator, which has the following signature:

    typedef void (*evo_MutationOperator)(evo_Context* context, void* gene);
    
Takes a child gene (created by crossover) and rearranges its contents in some manner.

--------------------------------------------------------------------------------------------------
void evo_Config_SetSuccessPredicate(evo_Config* config, evo_SuccessPredicate successPredicate);
--------------------------------------------------------------------------------------------------

Sets the sucess predicate, which has the following signature:

    typedef evo_bool (*evo_SuccessPredicate)(evo_Context* context);

Returns true (non-zero) if the evolutionary algorithm was "successful"
If this returns false (zero), the evolutionary algorithm should continue and is not yet considered successful.

Note that the algorithm will always terminate at the configured maxIterations.
However, when that occurs, the algorithm marks that particular iteration as a failure.



-------------------------

evo_Config Optional Setup

-------------------------

All setup functions must be called before an evo_Config_Execute call.
Configurations must not be reused.

---------------------------------------------------------------------------------
void evo_Config_AddContextStartCallback(evo_Config* config, evo_UserCallback cb);
---------------------------------------------------------------------------------

Takes a callback with the following signature:

    typedef void (*evo_UserCallback)(evo_Context* context);

This callback is invoked before a particular thread begins its computations.
This is useful for custom data allocation used by things such as the selection operator.

-------------------------------------------------------------------------------
void evo_Config_AddContextEndCallback(evo_Config* config, evo_UserCallback cb);
-------------------------------------------------------------------------------

Takes a callback with the following signature:

    typedef void (*evo_UserCallback)(evo_Context* context);

This callback is invoked after a particular thread finishes its computations.
This is useful for custom data allocation used by things such as the selection operator.



-------------------------

evo_Config Execution

-------------------------

All setup functions must be called before an evo_Config_Execute call.
Configurations must not be reused.

--------------------------------------------
void evo_Config_Execute(evo_Config* config);
--------------------------------------------

Starts evolutionary algorithm execution across multiple threads.

Requires the following to be set:
* thread count
* trials per thread
* population size
* max iterations

* population initializer
* population finializer

* fitness operator
* selection operator
* crossover operator
* mutation operator
* success predicate

All required configuration details must be filled, or this will fail.
The configuration must not already be running, and must not have been used previously,
or this will fail.

On failure, the program will exit with an error message.



-------------------------

evo_Context

-------------------------

An evo_Context is a block of data that is unique to each thread running the evolutionary algorithm.

The context contains useful information about its current progress in computation, its
local statistics, its local population, fitness, and userdata required by the various evolutionary operators.

NOTE: Some attributes are left undocumented here, because they are implementation details.
They might be useful to certain applications though.

-----------------------
evo_uint threadID;
-----------------------  
    
The thread id, which might be useful if for some reason global storage is required by
part of the algorithm.

-----------------------
evo_uint trial;
-----------------------

The number of trials that this thread has run of the evolutionary algorithm.

-----------------------
evo_uint iteration;
-----------------------
The number of iterations that this trial of the evolutionary algorithm has run for.
    
-----------------------
evo_Stats stats;
-----------------------

Used to construct local statistics which get aggregated when the program finishes.

-----------------------    
double bestFitness;    
-----------------------

The fitness of the best in the population. Might be useful for success predicates.

-----------------------    
void** genes;
-----------------------

An array of genes in the population.
Encoding is abstracted, but user-defined evolutionary operators
must share the same encoding or else the results of the algorithm are undefined.       

-----------------------
double* fitnesses;
-----------------------

A fitness value for each gene in the population. 
Typically, a selection operator will try to maximize the fitness.

However, the particular encoding depends on agreed upon encoding for fitness values
between the fitness operator and the selection operator.    
    
-----------------------
void* selectionUserData;
-----------------------
Custom data that can be used by the selection operator.



-------------------------

evo_Context Operations

-------------------------

--------------------------------------------------------------------------
evo_bool evo_Context_AddBreedEvent(evo_Context* context,
    evo_uint parentA, evo_uint parentB, evo_uint childA, evo_uint childB);
--------------------------------------------------------------------------
    
For use with the selection operator.
AddBreedEvent takes valid indexes within the genes array to be chosen as parents/children.

If it successfully added the parents/children, then it will return 1.
However, if any of the genes was already chosen by a previous call, then it will return 0.